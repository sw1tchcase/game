package shaders
import sg "shared:sokol/gfx"
import "core:math/linalg"
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i src/shaders/terrain.glsl -o src/shaders/terrain.odin -l glsl430 -f sokol_odin

    Overview:
    =========
    Shader program: 'terrain':
        Get shader desc: terrain_shader_desc(sg.query_backend())
        Vertex shader: terrain_vs
            Attributes:
                ATTR_terrain_vs_position => 0
            Uniform block 'terrain_vs_params':
                Odin struct: Terrain_Vs_Params
                Bind slot: SLOT_terrain_vs_params => 0
            Image 'tex':
                Image type: ._2D
                Sample type: .FLOAT
                Multisampled: false
                Bind slot: SLOT_tex => 0
            Sampler 'smp':
                Type: .FILTERING
                Bind slot: SLOT_smp => 0
            Image Sampler Pair 'tex_smp':
                Image: tex
                Sampler: smp
        Fragment shader: terrain_fs
*/
ATTR_terrain_vs_position :: 0
SLOT_terrain_vs_params :: 0
SLOT_tex :: 0
SLOT_smp :: 0
Terrain_Vs_Params :: struct #align(16) {
    using _: struct #packed {
        mvp: linalg.Matrix4f32,
        cam_pos: [3]f32,
        _: [4]u8,
    },
}
/*
    #version 430

    uniform vec4 terrain_vs_params[5];
    layout(binding = 0) uniform sampler2D tex_smp;

    layout(location = 0) in vec2 position;
    layout(location = 0) out vec3 frag_pos;
    layout(location = 1) out vec3 view_pos;

    void main()
    {
        float _36 = position.x + float(gl_InstanceID % 8);
        float _42 = position.y + float(gl_InstanceID / 8);
        gl_Position = mat4(terrain_vs_params[0], terrain_vs_params[1], terrain_vs_params[2], terrain_vs_params[3]) * vec4(_36, textureLod(tex_smp, vec2(_36 * 0.125, _42 * 0.125), 0.0).x, _42, 1.0);
        frag_pos = vec3(_36, 0.0, _42);
        view_pos = terrain_vs_params[4].xyz;
    }

*/
@(private)
terrain_vs_source_glsl430 := [616]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x65,0x72,0x72,0x61,
    0x69,0x6e,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x69,
    0x65,0x77,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x33,0x36,0x20,0x3d,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,
    0x78,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x67,0x6c,0x5f,0x49,0x6e,0x73,
    0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x20,0x25,0x20,0x38,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x32,0x20,0x3d,0x20,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x79,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x28,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x20,0x2f,
    0x20,0x38,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x74,0x65,0x72,0x72,
    0x61,0x69,0x6e,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2c,0x20,0x74,0x65,0x72,0x72,0x61,0x69,0x6e,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x74,0x65,0x72,0x72,0x61,0x69,0x6e,0x5f,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x74,0x65,
    0x72,0x72,0x61,0x69,0x6e,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x33,0x36,0x2c,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4c,0x6f,0x64,0x28,0x74,0x65,0x78,0x5f,0x73,
    0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x33,0x36,0x20,0x2a,0x20,0x30,
    0x2e,0x31,0x32,0x35,0x2c,0x20,0x5f,0x34,0x32,0x20,0x2a,0x20,0x30,0x2e,0x31,0x32,
    0x35,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2e,0x78,0x2c,0x20,0x5f,0x34,0x32,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x70,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x33,0x36,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x5f,0x34,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x69,0x65,0x77,0x5f,0x70,0x6f,0x73,0x20,0x3d,0x20,0x74,0x65,0x72,0x72,0x61,0x69,
    0x6e,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2e,0x78,
    0x79,0x7a,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
}
/*
    #version 430

    layout(location = 0) in vec3 frag_pos;
    layout(location = 1) in vec3 view_pos;
    layout(location = 0) out vec4 frag_color;

    void main()
    {
        vec3 _30 = normalize(vec3(0.0, 4.0, 0.0) - frag_pos);
        frag_color = vec4(((vec3(0.100000001490116119384765625) * max(_30.y, 0.0)) + (vec3(1.0) * (0.5 * pow(max(dot(normalize(view_pos - frag_pos), reflect(-_30, vec3(0.0, 1.0, 0.0))), 0.0), 2.0)))) * vec3(0.20000000298023223876953125, 0.800000011920928955078125, 0.4000000059604644775390625), 1.0);
    }

*/
@(private)
terrain_fs_source_glsl430 := [508]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x33,0x20,0x76,0x69,0x65,0x77,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,
    0x30,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x76,0x65,
    0x63,0x33,0x28,0x30,0x2e,0x30,0x2c,0x20,0x34,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x20,0x2d,0x20,0x66,0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x28,0x28,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x31,0x30,
    0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,
    0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x20,0x2a,0x20,0x6d,0x61,0x78,
    0x28,0x5f,0x33,0x30,0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,
    0x28,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x28,0x30,0x2e,
    0x35,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x76,0x69,0x65,0x77,0x5f,0x70,
    0x6f,0x73,0x20,0x2d,0x20,0x66,0x72,0x61,0x67,0x5f,0x70,0x6f,0x73,0x29,0x2c,0x20,
    0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x5f,0x33,0x30,0x2c,0x20,0x76,0x65,
    0x63,0x33,0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x32,0x2e,0x30,0x29,0x29,
    0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,0x30,0x30,0x30,
    0x30,0x30,0x30,0x30,0x32,0x39,0x38,0x30,0x32,0x33,0x32,0x32,0x33,0x38,0x37,0x36,
    0x39,0x35,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x38,0x30,0x30,0x30,0x30,0x30,
    0x30,0x31,0x31,0x39,0x32,0x30,0x39,0x32,0x38,0x39,0x35,0x35,0x30,0x37,0x38,0x31,
    0x32,0x35,0x2c,0x20,0x30,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,
    0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
}
terrain_shader_desc :: proc (backend: sg.Backend) -> sg.Shader_Desc {
    desc: sg.Shader_Desc
    desc.label = "terrain_shader"
    #partial switch backend {
    case .GLCORE:
        desc.attrs[0].name = "position"
        desc.vs.source = transmute(cstring)&terrain_vs_source_glsl430
        desc.vs.entry = "main"
        desc.vs.uniform_blocks[0].size = 80
        desc.vs.uniform_blocks[0].layout = .STD140
        desc.vs.uniform_blocks[0].uniforms[0].name = "terrain_vs_params"
        desc.vs.uniform_blocks[0].uniforms[0].type = .FLOAT4
        desc.vs.uniform_blocks[0].uniforms[0].array_count = 5
        desc.vs.images[0].used = true
        desc.vs.images[0].multisampled = false
        desc.vs.images[0].image_type = ._2D
        desc.vs.images[0].sample_type = .FLOAT
        desc.vs.samplers[0].used = true
        desc.vs.samplers[0].sampler_type = .FILTERING
        desc.vs.image_sampler_pairs[0].used = true
        desc.vs.image_sampler_pairs[0].image_slot = 0
        desc.vs.image_sampler_pairs[0].sampler_slot = 0
        desc.vs.image_sampler_pairs[0].glsl_name = "tex_smp"
        desc.fs.source = transmute(cstring)&terrain_fs_source_glsl430
        desc.fs.entry = "main"
    }
    return desc
}
